// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_RAILWAY")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  imageUrl  String?
  createdAt DateTime @default(now())

  Posts     Post[]
  Comments  Comment[]
  Likes     Like[]
  following Follow[]  @relation("Following")
  followers Follow[]  @relation("Followers")
}

model Post {
  id            Int      @id @default(autoincrement())
  title         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  content       String
  imagePublicId String?
  author        User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      Int

  Comments Comment[]
  Likes    Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int

  Likes Like[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?
}

model Follow {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  follower    User     @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  Int
  following   User     @relation("Following", fields: [followingId], references: [id])
  followingId Int

  @@unique([followerId, followingId]) // Prevents duplicate follows
}
